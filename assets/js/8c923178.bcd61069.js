"use strict";(self.webpackChunksandbox_fusion=self.webpackChunksandbox_fusion||[]).push([[8152],{46922:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>d,toc:()=>r});var s=t(74848),i=t(28453);const a={sidebar_position:1},o="Types of Datasets",d={id:"docs/background/dataset-types",title:"Types of Datasets",description:"To maximize code reuse, many dataset implementations in the sandbox service use the same Python class. For example:",source:"@site/docs/docs/background/dataset-types.md",sourceDirName:"docs/background",slug:"/docs/background/dataset-types",permalink:"/SandboxFusion/docs/docs/background/dataset-types",draft:!1,unlisted:!1,editUrl:"https://github.com/bytedance/SandboxFusion/tree/main/docs/docs/docs/background/dataset-types.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",previous:{title:"Explanation",permalink:"/SandboxFusion/docs/category/explanation"}},l={},r=[{value:"AutoEvalDataset",id:"autoevaldataset",level:2},{value:"CommonOJDataset",id:"commonojdataset",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"types-of-datasets",children:"Types of Datasets"})}),"\n",(0,s.jsx)(n.p,{children:"To maximize code reuse, many dataset implementations in the sandbox service use the same Python class. For example:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"HumanEvalDataset"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"humaneval_python"}),"\n",(0,s.jsx)(n.li,{children:"humaneval_cpp"}),"\n",(0,s.jsx)(n.li,{children:"humaneval_typescript"}),"\n",(0,s.jsx)(n.li,{children:"shadow_humaneval_python"}),"\n",(0,s.jsx)(n.li,{children:"bigcodebench"}),"\n",(0,s.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CommonOJDataset"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"code_contests"}),"\n",(0,s.jsx)(n.li,{children:"..."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Here, ",(0,s.jsx)(n.code,{children:"humaneval_python"})," is a specific ",(0,s.jsx)(n.strong,{children:"dataset"}),", while ",(0,s.jsx)(n.code,{children:"HumanEvalDataset"})," is its ",(0,s.jsx)(n.strong,{children:"dataset type"}),".\nThe dataset type determines the data format of its corresponding datasets, as well as the logic for prompt generation, code extraction, and problem evaluation."]}),"\n",(0,s.jsx)(n.p,{children:"Below are some commonly used dataset types."}),"\n",(0,s.jsx)(n.h2,{id:"autoevaldataset",children:"AutoEvalDataset"}),"\n",(0,s.jsx)(n.p,{children:"This type prompts the model to output a specified function or partial code. It performs testing by appending test assertions after the model's output code. It supports few-shot learning, custom extraction, and execution languages, as well as file dependencies."}),"\n",(0,s.jsx)(n.p,{children:"Data format:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"id: Unique identifier within the dataset, string or int type"}),"\n",(0,s.jsx)(n.li,{children:"content: prompt"}),"\n",(0,s.jsxs)(n.li,{children:["test: json","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"code: Test code, appended to the model's output code for testing"}),"\n",(0,s.jsx)(n.li,{children:"asset: json, optional. A dictionary mapping file names to their base64-encoded content"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["labels: json","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"fewshot: Custom few-shot examples"}),"\n",(0,s.jsx)(n.li,{children:"programming_language: The type of code the model should output"}),"\n",(0,s.jsx)(n.li,{children:"execution_language: The language used to execute the final test code"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"commonojdataset",children:"CommonOJDataset"}),"\n",(0,s.jsx)(n.p,{children:"This type prompts the model to output complete, executable code. It tests by checking whether the stdout for a given stdin matches the expected output. It supports any programming language."}),"\n",(0,s.jsx)(n.p,{children:"This format is used for most competitive programming problems."}),"\n",(0,s.jsx)(n.p,{children:"Data format:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"id: Unique identifier within the dataset, string or int type"}),"\n",(0,s.jsx)(n.li,{children:"content: Problem content. The prompt given to the model will include programming language requirements based on this"}),"\n",(0,s.jsxs)(n.li,{children:["test: json list, where each list element has the format:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["input: json","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"stdin: Standard input"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["output: json","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"stdout: Standard output"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"labels: json"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);