"use strict";(self.webpackChunksandbox_fusion=self.webpackChunksandbox_fusion||[]).push([[3707],{24422:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>a,toc:()=>d});var i=t(74848),o=t(28453);const c={},r="Lean",a={id:"docs/reference/execution-detail/lean",title:"Lean",description:"Version: 4.10.0-rc2",source:"@site/docs/docs/reference/execution-detail/lean.md",sourceDirName:"docs/reference/execution-detail",slug:"/docs/reference/execution-detail/lean",permalink:"/SandboxFusion/docs/docs/reference/execution-detail/lean",draft:!1,unlisted:!1,editUrl:"https://github.com/bytedance/SandboxFusion/tree/main/docs/docs/docs/reference/execution-detail/lean.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"Java",permalink:"/SandboxFusion/docs/docs/reference/execution-detail/java"},next:{title:"JavaScript & TypeScript",permalink:"/SandboxFusion/docs/docs/reference/execution-detail/node"}},s={},d=[];function l(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"lean",children:"Lean"})}),"\n",(0,i.jsx)(n.p,{children:"Version: 4.10.0-rc2"}),"\n",(0,i.jsxs)(n.p,{children:["The Lean project is built and run using ",(0,i.jsx)(n.code,{children:"lake"}),". The corresponding project is located ",(0,i.jsx)(n.a,{href:"https://github.com/bytedance/SandboxFusion/tree/main/runtime/lean",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Since Lean's foundation library Mathlib is very slow to compile and the complete compilation cache is very large, we chose to compile a subset of Mathlib that is sufficient for MiniF2F evaluation. This subset can be found ",(0,i.jsx)(n.a,{href:"https://github.com/bytedance/SandboxFusion/blob/main/runtime/lean/Main.lean",children:"here"}),", which we referenced from ",(0,i.jsx)(n.a,{href:"https://github.com/yangky11/miniF2F-lean4",children:"https://github.com/yangky11/miniF2F-lean4"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["When running the code, the sandbox copies the complete structure of this lake project to a temporary directory, writes the input code to ",(0,i.jsx)(n.code,{children:"Main.lean"}),", and executes ",(0,i.jsx)(n.code,{children:"lake build"}),". It's important to note that Lean's proof correctness checking is done during compilation time, and running the generated binary file has no special significance. Therefore, the Lean language doesn't have a ",(0,i.jsx)(n.code,{children:"compile_result"}),", only a ",(0,i.jsx)(n.code,{children:"run_result"}),", which corresponds to the result of the ",(0,i.jsx)(n.code,{children:"lake build"})," command."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);