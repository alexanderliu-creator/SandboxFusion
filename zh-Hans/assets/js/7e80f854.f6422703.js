"use strict";(self.webpackChunksandbox_fusion=self.webpackChunksandbox_fusion||[]).push([[4682],{56855:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var o=n(74848),s=n(28453);const r={},a="CommonOJ",d={id:"docs/reference/dataset-detail/common-oj",title:"CommonOJ",description:"The CommonOJ dataset aims to unify the evaluation of competitive programming problems. These problems comes with multiple formats:",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/docs/reference/dataset-detail/common-oj.md",sourceDirName:"docs/reference/dataset-detail",slug:"/docs/reference/dataset-detail/common-oj",permalink:"/SandboxFusion/zh-Hans/docs/docs/reference/dataset-detail/common-oj",draft:!1,unlisted:!1,editUrl:"https://github.com/bytedance/SandboxFusion/tree/main/docs/docs/docs/reference/dataset-detail/common-oj.md",tags:[],version:"current",frontMatter:{},sidebar:"docSidebar",previous:{title:"AutoEval",permalink:"/SandboxFusion/zh-Hans/docs/docs/reference/dataset-detail/autoeval"},next:{title:"\u914d\u7f6e\u6587\u4ef6",permalink:"/SandboxFusion/zh-Hans/docs/docs/reference/config"}},i={},c=[{value:"Data Format",id:"data-format",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"commonoj",children:"CommonOJ"})}),"\n",(0,o.jsx)(t.p,{children:"The CommonOJ dataset aims to unify the evaluation of competitive programming problems. These problems comes with multiple formats:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Standard"})," (implemented): LLM outputs complete executable code and sandbox determines whether the problem is solved by checking if the standard output matches the expected output under given standard inputs."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Testlib"})," (under progress): When a solution requires advanced methods to test, e.g. has multiple correct outputs given an input, or a round-off error is permitted. Testlib programs can be used to check the correctness."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Code Interface"})," (under discussion): Problems in LeetCode and TopCoder do not follows the format of stdio, but only requires the solution class. The support of these problems is still under discussion."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"data-format",children:"Data Format"}),"\n",(0,o.jsx)(t.p,{children:"The problem format accepted by the CommonOJ dataset is as follows:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-json",children:'{\n    "id": str,                          # Unique identifier\n    "content": str,                     # Problem statement\n    "labels": {\n        "problem_format": str,          # Optional, "Standard" by default\n    },\n    "test": [                           # Test data format for "Standard" problems\n        {\n            "input": {                  # Input data, filename -> content, stdin is the standard stream\n                "stdin": "xxx"\n            },\n            "output": {                 # Expected output, filename -> content \n                "stdout": "xxx"\n            }\n        },\n        ...\n    ],\n    "canonical_solution": {             # Used to store the correct answer\n        "cpp": ["#include..."],\n        "python": ["import...", "import...", ...]\n    }\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);