"use strict";(self.webpackChunksandbox_fusion=self.webpackChunksandbox_fusion||[]).push([[9375],{19099:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>x,frontMatter:()=>d,metadata:()=>u,snippet1:()=>p,snippet2:()=>h,snippet3:()=>o,snippet4:()=>g,toc:()=>_});var a=s(74848),n=s(28453),i=s(27856),l=s(52138);const d={sidebar_position:1},r="Get Started",u={id:"docs/get-started",title:"Get Started",description:"\u4ee3\u7801\u6c99\u76d2\u670d\u52a1\u4e3b\u8981\u63d0\u4f9b\u4e24\u4e2a\u529f\u80fd\uff1a\u8fd0\u884c\u4ee3\u7801\u548c\u5224\u65ad\u9898\u76ee\u5bf9\u9519\u3002",source:"@site/i18n/zh-Hans/docusaurus-plugin-content-docs/current/docs/get-started.mdx",sourceDirName:"docs",slug:"/docs/get-started",permalink:"/SandboxFusion/zh-Hans/docs/docs/get-started",draft:!1,unlisted:!1,editUrl:"https://github.com/bytedance/SandboxFusion/tree/main/docs/docs/docs/get-started.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docSidebar",next:{title:"How-to",permalink:"/SandboxFusion/zh-Hans/docs/category/how-to"}},c={},p=String.raw`curl '${i.A.host}/run_code' \
  -H 'Content-Type: application/json' \
  --data-raw '{"code": "print(\"Hello, world!\")", "language": "python"}'
`,h=`import requests\nimport json\n\nresponse = requests.post('${i.A.host}/run_code', json={\n    'code': '''\n#include <iostream>\n\nint main() {\n    std::cout << "Hello, world!" << std::endl;\n    return 0;\n}\n''',\n    'language': 'cpp',\n})\n\nprint(json.dumps(response.json(), indent=2))\n`,o=String.raw`curl '${i.A.host}/get_prompts' \
  -H 'Content-Type: application/json' \
  --data-raw '{"dataset":"mbpp","config":{}}'
`,g=`curl '${i.A.host}/submit' \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{"dataset":"mbpp","id":"11","completion":"Here is a Python function that removes the first and last occurrence of a given character from a string:\\n\\n\`\`\`python\\ndef remove_Occ(s, char):\\n    first_occ = s.find(char)\\n    last_occ = s.rfind(char)\\n    \\n    if first_occ == -1 or first_occ == last_occ:\\n        return s\\n    \\n    # Remove the first occurrence\\n    s = s[:first_occ] + s[first_occ + 1:]\\n    \\n    # Adjust the index for the last occurrence since the string is now one character shorter\\n    last_occ -= 1\\n    \\n    # Remove the last occurrence\\n    s = s[:last_occ] + s[last_occ + 1:]\\n    \\n    return s\\n\\n# Test the function\\nassert remove_Occ(\\"hello\\", \\"l\\") == \\"heo\\"\\n\`\`\`\\n\\nThis function works as follows:\\n1. It finds the index of the first occurrence of the given character.\\n2. It finds the index of the last occurrence of the given character.\\n3. If the character does not exist in the string or only occurs once, it simply returns the original string.\\n4. Otherwise, it constructs a new string by removing the first occurrence and then adjusts the index for the last occurrence before removing it.\\n\\nYou can run the provided test to ensure the function works as expected.","config":{}}'\n`,_=[{value:"\u672c\u5730\u90e8\u7f72",id:"\u672c\u5730\u90e8\u7f72",level:2},{value:"\u4f7f\u7528",id:"\u4f7f\u7528",level:2},{value:"\u4ee3\u7801\u6c99\u76d2",id:"\u4ee3\u7801\u6c99\u76d2",level:3},{value:"\u6570\u636e\u96c6",id:"\u6570\u636e\u96c6",level:3}];function m(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"get-started",children:"Get Started"})}),"\n",(0,a.jsx)(t.p,{children:"\u4ee3\u7801\u6c99\u76d2\u670d\u52a1\u4e3b\u8981\u63d0\u4f9b\u4e24\u4e2a\u529f\u80fd\uff1a\u8fd0\u884c\u4ee3\u7801\u548c\u5224\u65ad\u9898\u76ee\u5bf9\u9519\u3002"}),"\n",(0,a.jsx)(t.p,{children:"\u652f\u6301\u7684\u7f16\u7a0b\u8bed\u8a00\uff1a"}),"\n",(0,a.jsx)("table",{style:{width:"100%",borderCollapse:"collapse",border:"none"},children:(0,a.jsx)("tbody",{style:{width:"100%",display:"table"},children:(0,a.jsxs)("tr",{style:{width:"100%",borderTop:"none"},children:[(0,a.jsx)("td",{style:{width:"33.33%",verticalAlign:"top",padding:"0 10px",border:"none"},children:(0,a.jsxs)("ul",{style:{padding:"0 0 0 20px",margin:0},children:[(0,a.jsx)("li",{children:"Python (python, pytest)"}),(0,a.jsx)("li",{children:"C++"}),(0,a.jsx)("li",{children:"C#"}),(0,a.jsx)("li",{children:"Go (go, go test)"}),(0,a.jsx)("li",{children:"Java (javac, junit)"}),(0,a.jsx)("li",{children:"NodeJS"}),(0,a.jsx)("li",{children:"Typescript (tsx, jest)"}),(0,a.jsx)("li",{children:"Lean"})]})}),(0,a.jsx)("td",{style:{width:"33.33%",verticalAlign:"top",padding:"0 10px",border:"none"},children:(0,a.jsxs)("ul",{style:{padding:"0 0 0 20px",margin:0},children:[(0,a.jsx)("li",{children:"Scala"}),(0,a.jsx)("li",{children:"Kotlin"}),(0,a.jsx)("li",{children:"PHP"}),(0,a.jsx)("li",{children:"Rust"}),(0,a.jsx)("li",{children:"Bash"}),(0,a.jsx)("li",{children:"Lua"}),(0,a.jsx)("li",{children:"R"}),(0,a.jsx)("li",{children:"Perl"})]})}),(0,a.jsx)("td",{style:{width:"33.33%",verticalAlign:"top",padding:"0 10px",border:"none"},children:(0,a.jsxs)("ul",{style:{padding:"0 0 0 20px",margin:0},children:[(0,a.jsx)("li",{children:"D"}),(0,a.jsx)("li",{children:"Ruby"}),(0,a.jsx)("li",{children:"Julia"}),(0,a.jsx)("li",{children:"Verilog"}),(0,a.jsx)("li",{children:"CUDA (GPU)"}),(0,a.jsx)("li",{children:"Python (GPU)"})]})})]})})}),"\n",(0,a.jsx)(t.p,{children:"\u5df2\u7ecf\u5b9e\u73b0\u7684\u5f00\u6e90\u6570\u636e\u96c6\uff1a"}),"\n",(0,a.jsx)("table",{style:{width:"100%",borderCollapse:"collapse",border:"none"},children:(0,a.jsx)("tbody",{style:{width:"100%",display:"table"},children:(0,a.jsxs)("tr",{style:{width:"100%",borderTop:"none"},children:[(0,a.jsx)("td",{style:{width:"50%",verticalAlign:"top",padding:"0 10px",border:"none"},children:(0,a.jsxs)("ul",{style:{padding:"0 0 0 20px",margin:0},children:[(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/openai/human-eval",children:"HumanEval"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/nuprl/MultiPL-E",children:"MultiPL-E HumanEval"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://huggingface.co/datasets/Miaosen/openai-humaneval-sky-shadow",children:"Shadow Humaneval"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/google-deepmind/code_contests",children:"CodeContests"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/google-research/google-research/tree/master/mbpp",children:"MBPP"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/amazon-science/mxeval",children:"MBXP"})})]})}),(0,a.jsx)("td",{style:{width:"50%",verticalAlign:"top",padding:"0 10px",border:"none"},children:(0,a.jsxs)("ul",{style:{padding:"0 0 0 20px",margin:0},children:[(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/SparksofAGI/MHPP",children:"MHPP"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/facebookresearch/cruxeval",children:"CRUXEval"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/THUDM/NaturalCodeBench",children:"NaturalCodeBench"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/deepseek-ai/DeepSeek-Coder/tree/main/Evaluation/PAL-Math",children:"PAL-Math"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/NVlabs/verilog-eval",children:"verilog-eval"})}),(0,a.jsx)("li",{children:(0,a.jsx)("a",{target:"_blank",href:"https://github.com/facebookresearch/miniF2F",children:"miniF2F"})})]})})]})})}),"\n",(0,a.jsx)(t.h2,{id:"\u672c\u5730\u90e8\u7f72",children:"\u672c\u5730\u90e8\u7f72"}),"\n",(0,a.jsx)(l.default,{language:"bash",children:(0,a.jsxs)(t.p,{children:["docker run -it -p 8080:8080 ",i.A.image]})}),"\n",(0,a.jsx)(t.p,{children:"\u56fd\u5185\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u955c\u50cf\u6e90\uff1a"}),"\n",(0,a.jsx)(l.default,{language:"bash",children:(0,a.jsxs)(t.p,{children:["docker run -it -p 8080:8080 ",i.A.cnImage]})}),"\n",(0,a.jsx)(t.h2,{id:"\u4f7f\u7528",children:"\u4f7f\u7528"}),"\n",(0,a.jsx)(t.h3,{id:"\u4ee3\u7801\u6c99\u76d2",children:"\u4ee3\u7801\u6c99\u76d2"}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:[i.A.host,"/SandboxFusion/playground/sandbox \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u9875\u9762"]})}),"\n",(0,a.jsx)(t.p,{children:"\u5728shell\u4e2d\u6267\u884c\u4e0b\u9762\u7684\u6307\u4ee4\u6765\u8bf7\u6c42\u6c99\u76d2\u6267\u884c\u4e00\u6bb5python\u4ee3\u7801\uff1a"}),"\n","\n",(0,a.jsx)(l.default,{language:"bash",children:p}),"\n",(0,a.jsx)(t.p,{children:"\u6837\u4f8b\u8f93\u51fa\uff1a"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'{\n  "status": "Success",\n  "message": "",\n  "compile_result": null,\n  "run_result": {\n    "status": "Finished",\n    "execution_time": 0.016735315322875977,\n    "return_code": 0,\n    "stdout": "Hello, world!\\n",\n    "stderr": ""\n  },\n  "executor_pod_name": null,\n  "files": {}\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"\u4e5f\u53ef\u4ee5\u7528Python\u811a\u672c\u5b8c\u6210\u7c7b\u4f3c\u7684\u8bf7\u6c42\uff0c\u4e00\u4e2a\u8fd0\u884cC++\u4ee3\u7801\u7684\u4f8b\u5b50\uff1a"}),"\n","\n",(0,a.jsx)(l.default,{language:"python",children:h}),"\n",(0,a.jsx)(t.p,{children:"\u6837\u4f8b\u8f93\u51fa\uff1a"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'{\n  "status": "Success",\n  "message": "",\n  "compile_result": {\n    "status": "Finished",\n    "execution_time": 0.45870447158813477,\n    "return_code": 0,\n    "stdout": "",\n    "stderr": ""\n  },\n  "run_result": {\n    "status": "Finished",\n    "execution_time": 0.002761363983154297,\n    "return_code": 0,\n    "stdout": "Hello, world!\\n",\n    "stderr": ""\n  },\n  "executor_pod_name": null,\n  "files": {}\n}\n'})}),"\n",(0,a.jsx)(t.h3,{id:"\u6570\u636e\u96c6",children:"\u6570\u636e\u96c6"}),"\n",(0,a.jsx)(t.admonition,{type:"tip",children:(0,a.jsxs)(t.p,{children:[i.A.host,"/SandboxFusion/playground/datasets  \u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u9875\u9762"]})}),"\n",(0,a.jsx)(t.p,{children:"Datasets\u6a21\u5757\u5b9e\u73b0\u4e86\u5404\u7c7b\u4e0d\u540cCode\u6570\u636e\u96c6\u7684\u5224\u65ad\u903b\u8f91\uff0c\u5e76\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u63a5\u53e3\u3002 \u4ee5MBPP\u6570\u636e\u96c6\u4e3a\u4f8b\uff0c\u4e0b\u9762\u662f\u901a\u8fc7\u6c99\u76d2\u670d\u52a1\u7ed9\u6a21\u578b\u8f93\u51fa\u505a\u8bc4\u4f30\u7684\u6d41\u7a0b\uff1a"}),"\n",(0,a.jsx)(t.p,{children:"\u83b7\u53d6MBPP\u6240\u6709\u9898\u76ee\u7684prompt\uff1a"}),"\n","\n",(0,a.jsx)(l.default,{language:"bash",children:o}),"\n",(0,a.jsx)(t.p,{children:"\u8f93\u51fa\uff1a"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'[\n  {\n    "id": 11,\n    "prompt": "Write a python function to remove first and last occurrence of a given character from the string. Your code should satisfy these tests:\\n\\nassert remove_Occ(\\"hello\\",\\"l\\") == \\"heo\\"",\n    "labels": {\n      "challenge_test_list": [\n        "assert remove_Occ(\\"hellolloll\\",\\"l\\") == \\"helollol\\"",\n        "assert remove_Occ(\\"\\",\\"l\\") == \\"\\""\n      ],\n      "test_setup_code": ""\n    }\n  },\n  {\n    "id": 12,\n    "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows. Your code should satisfy these tests:\\n\\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",\n    "labels": {\n      "challenge_test_list": [],\n      "test_setup_code": ""\n    }\n  },\n  ...\n]\n'})}),"\n",(0,a.jsx)(t.p,{children:"\u63d0\u4ea4\u6a21\u578b\u7684\u8f93\u51fa\uff0c\u83b7\u5f97\u9898\u76ee\u5bf9\u9519\u7684\u7ed3\u679c\uff1a"}),"\n","\n",(0,a.jsx)(l.default,{language:"bash",children:g}),"\n",(0,a.jsx)(t.p,{children:"\u8f93\u51fa\uff1a"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-json",children:'{\n  "id": "11",\n  "accepted": true,\n  "extracted_code": "def remove_Occ(s, char):\\n    first_occ = s.find(char)\\n    last_occ = s.rfind(char)\\n    \\n    if first_occ == -1 or first_occ == last_occ:\\n        return s\\n    \\n    # Remove the first occurrence\\n    s = s[:first_occ] + s[first_occ + 1:]\\n    \\n    # Adjust the index for the last occurrence since the string is now one character shorter\\n    last_occ -= 1\\n    \\n    # Remove the last occurrence\\n    s = s[:last_occ] + s[last_occ + 1:]\\n    \\n    return s\\n\\n# Test the function\\nassert remove_Occ(\\"hello\\", \\"l\\") == \\"heo\\"",\n  "full_code": "def remove_Occ(s, char):\\n    first_occ = s.find(char)\\n    last_occ = s.rfind(char)\\n    \\n    if first_occ == -1 or first_occ == last_occ:\\n        return s\\n    \\n    # Remove the first occurrence\\n    s = s[:first_occ] + s[first_occ + 1:]\\n    \\n    # Adjust the index for the last occurrence since the string is now one character shorter\\n    last_occ -= 1\\n    \\n    # Remove the last occurrence\\n    s = s[:last_occ] + s[last_occ + 1:]\\n    \\n    return s\\n\\n# Test the function\\nassert remove_Occ(\\"hello\\", \\"l\\") == \\"heo\\"\\n\\nassert remove_Occ(\\"hello\\",\\"l\\") == \\"heo\\"\\nassert remove_Occ(\\"abcda\\",\\"a\\") == \\"bcd\\"\\nassert remove_Occ(\\"PHP\\",\\"P\\") == \\"H\\"",\n  "test_code": null,\n  "tests": [\n    {\n      "passed": true,\n      "exec_info": {\n        "status": "Success",\n        "message": "",\n        "compile_result": null,\n        "run_result": {\n          "status": "Finished",\n          "execution_time": 0.017310619354248047,\n          "return_code": 0,\n          "stdout": "",\n          "stderr": ""\n        },\n        "executor_pod_name": null,\n        "files": {}\n      },\n      "test_info": null\n    }\n  ],\n  "extracted_type": null,\n  "extra": null\n}\n'})})]})}function x(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},27856:(e,t,s)=>{s.d(t,{A:()=>n,E:()=>a});const a={FullStackBench:{datasetType:"AutoEvalDataset",datasets:[{id:"full_stack_bench_zh",dataset:"full_stack_bench_zh",huggingFace:{id:"ByteDance/FullStackBench",subset:"zh",split:"test"}},{id:"full_stack_bench_en",dataset:"full_stack_bench_en",huggingFace:{id:"ByteDance/FullStackBench",subset:"en",split:"test"}}]},AutoEval:{datasetType:"AutoEvalDataset",datasets:[{id:"leetcode_sample_python",dataset:"leetcode_sample_python",huggingFace:{id:"sine/LeetCodeSample",subset:"python",split:"test"}}]},HumanEval:{datasetType:"HumanEvalDataset",datasets:[{id:"humaneval_python",dataset:"humaneval_python",huggingFace:{id:"openai/openai_humaneval",split:"test"}}]},MBPP:{datasetType:"MBPPDataset",datasets:[{id:"mbpp",dataset:"mbpp",huggingFace:{id:"laylarsssss/FusedMBPP",split:"test"}}]},MHPP:{datasetType:"MHPPDataset",datasets:[{id:"mhpp_140",dataset:"mhpp",huggingFace:{id:"laylarsssss/FusedMHPP",subset:"mhpp",split:"test"}},{id:"mhpp_210",dataset:"mhpp",huggingFace:{id:"laylarsssss/FusedMHPP",subset:"mhpp_210",split:"test"}}]},MiniF2F:{datasetType:"MiniF2FLean4Dataset",datasets:[{id:"minif2f_lean4_test",dataset:"minif2f_lean4_test",huggingFace:{id:"laylarsssss/FusedMHPP",split:"test"}},{id:"minif2f_lean4_valid",dataset:"minif2f_lean4_valid",huggingFace:{id:"laylarsssss/FusedMHPP",split:"test"}}]},MultipleHumanEval:{datasetType:"MultiPLEDataset",datasets:[{id:"humaneval_cpp",dataset:"multiple_cpp",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-cpp",split:"test"}},{id:"humaneval_typescript",dataset:"multiple_typescript",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-ts",split:"test"}},{id:"humaneval_bash",dataset:"multiple_bash",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-sh",split:"test"}},{id:"humaneval_csharp",dataset:"multiple_csharp",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-cs",split:"test"}},{id:"humaneval_go",dataset:"multiple_go",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-go",split:"test"}},{id:"humaneval_java",dataset:"multiple_java",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-java",split:"test"}},{id:"humaneval_lua",dataset:"multiple_lua",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-lua",split:"test"}},{id:"humaneval_javascript",dataset:"multiple_javascript",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-js",split:"test"}},{id:"humaneval_php",dataset:"multiple_php",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-php",split:"test"}},{id:"humaneval_perl",dataset:"multiple_perl",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-pl",split:"test"}},{id:"humaneval_racket",dataset:"multiple_racket",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-rkt",split:"test"}},{id:"humaneval_r",dataset:"multiple_r",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-r",split:"test"}},{id:"humaneval_rust",dataset:"multiple_rust",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-rs",split:"test"}},{id:"humaneval_scala",dataset:"multiple_scala",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-scala",split:"test"}},{id:"humaneval_swift",dataset:"multiple_swift",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-swift",split:"test"}},{id:"humaneval_ruby",dataset:"multiple_ruby",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-ruby",split:"test"}},{id:"humaneval_d",dataset:"multiple_d",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-d",split:"test"}},{id:"humaneval_julia",dataset:"multiple_julia",huggingFace:{id:"nuprl/MultiPL-E",subset:"humaneval-jl",split:"test"}}]},MultipleMBPP:{datasetType:"MultiPLEDataset",datasets:[{id:"mbpp_cpp",dataset:"multiple_cpp",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-cpp",split:"test"}},{id:"mbpp_typescript",dataset:"multiple_typescript",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-ts",split:"test"}},{id:"mbpp_bash",dataset:"multiple_bash",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-sh",split:"test"}},{id:"mbpp_csharp",dataset:"multiple_csharp",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-cs",split:"test"}},{id:"mbpp_go",dataset:"multiple_go",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-go",split:"test"}},{id:"mbpp_java",dataset:"multiple_java",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-java",split:"test"}},{id:"mbpp_lua",dataset:"multiple_lua",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-lua",split:"test"}},{id:"mbpp_javascript",dataset:"multiple_javascript",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-js",split:"test"}},{id:"mbpp_php",dataset:"multiple_php",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-php",split:"test"}},{id:"mbpp_perl",dataset:"multiple_perl",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-pl",split:"test"}},{id:"mbpp_racket",dataset:"multiple_racket",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-rkt",split:"test"}},{id:"mbpp_r",dataset:"multiple_r",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-r",split:"test"}},{id:"mbpp_rust",dataset:"multiple_rust",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-rs",split:"test"}},{id:"mbpp_scala",dataset:"multiple_scala",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-scala",split:"test"}},{id:"mbpp_swift",dataset:"multiple_swift",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-swift",split:"test"}},{id:"mbpp_ruby",dataset:"multiple_ruby",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-ruby",split:"test"}},{id:"mbpp_d",dataset:"multiple_d",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-d",split:"test"}},{id:"mbpp_julia",dataset:"multiple_julia",huggingFace:{id:"nuprl/MultiPL-E",subset:"mbpp-jl",split:"test"}}]},CommonOJ:{datasetType:"CommonOJDataset",datasets:[{id:"code_contests_train",dataset:"code_contests_train",huggingFace:{id:"sine/FusedCodeContests",split:"train"}},{id:"code_contests_valid",dataset:"code_contests_valid",huggingFace:{id:"sine/FusedCodeContests",split:"valid"}},{id:"code_contests_test",dataset:"code_contests_test",huggingFace:{id:"sine/FusedCodeContests",split:"test"}}]},CRUXEval:{datasetType:"CruxEvalDataset",datasets:[{id:"cruxeval",dataset:"cruxeval",huggingFace:{id:"cruxeval-org/cruxeval",split:"test"}}]},CRUXEvalX:{datasetType:"CruxEvalDataset",datasets:[{id:"cruxeval_x_D_ut",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"D_ut",split:"test"}},{id:"cruxeval_x_R",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"R",split:"test"}},{id:"cruxeval_x_bash",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"bash",split:"test"}},{id:"cruxeval_x_cpp",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"cpp",split:"test"}},{id:"cruxeval_x_csharp",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"csharp",split:"test"}},{id:"cruxeval_x_go_test",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"go_test",split:"test"}},{id:"cruxeval_x_java",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"java",split:"test"}},{id:"cruxeval_x_julia",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"julia",split:"test"}},{id:"cruxeval_x_lua",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"lua",split:"test"}},{id:"cruxeval_x_nodejs",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"nodejs",split:"test"}},{id:"cruxeval_x_perl",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"perl",split:"test"}},{id:"cruxeval_x_php",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"php",split:"test"}},{id:"cruxeval_x_python",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"python",split:"test"}},{id:"cruxeval_x_racket",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"racket",split:"test"}},{id:"cruxeval_x_ruby",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"ruby",split:"test"}},{id:"cruxeval_x_rust",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"rust",split:"test"}},{id:"cruxeval_x_scala",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"scala",split:"test"}},{id:"cruxeval_x_swift",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"swift",split:"test"}},{id:"cruxeval_x_typescript",dataset:"cruxeval_x",huggingFace:{id:"sine/FusedCRUXEvalX",subset:"typescript",split:"test"}}]},NaturalCodeBench:{datasetType:"NaturalCodeBenchDataset",datasets:[{id:"ncb_python_zh",dataset:"ncb_python_zh",huggingFace:{id:"sine/FusedNaturalCodeBench",subset:"python_zh",split:"test"}},{id:"ncb_python_en",dataset:"ncb_python_en",huggingFace:{id:"sine/FusedNaturalCodeBench",subset:"python_en",split:"test"}},{id:"ncb_java_zh",dataset:"ncb_java_zh",huggingFace:{id:"sine/FusedNaturalCodeBench",subset:"java_zh",split:"test"}},{id:"ncb_java_en",dataset:"ncb_java_en",huggingFace:{id:"sine/FusedNaturalCodeBench",subset:"java_en",split:"test"}}]},PALMath:{datasetType:"PalMathDataset",datasets:[{id:"asdiv",dataset:"palmath",huggingFace:{id:"sine/FusedPALMath",subset:"asdiv",split:"test"}},{id:"gsm8k",dataset:"palmath",huggingFace:{id:"sine/FusedPALMath",subset:"gsm8k",split:"test"}},{id:"hard",dataset:"palmath",huggingFace:{id:"sine/FusedPALMath",subset:"hard",split:"test"}},{id:"math",dataset:"palmath",huggingFace:{id:"sine/FusedPALMath",subset:"math",split:"test"}},{id:"mawps",dataset:"palmath",huggingFace:{id:"sine/FusedPALMath",subset:"mawps",split:"test"}},{id:"svamp",dataset:"palmath",huggingFace:{id:"sine/FusedPALMath",subset:"svamp",split:"test"}},{id:"tabmwp",dataset:"palmath",huggingFace:{id:"sine/FusedPALMath",subset:"tabmwp",split:"test"}}]},VerilogEval:{datasetType:"PalMathDataset",datasets:[{id:"verilogeval_human",dataset:"verilogeval_human",huggingFace:{id:"sine/FusedVerilogEval",subset:"human",split:"test"}},{id:"verilogeval_machine",dataset:"verilogeval_machine",huggingFace:{id:"sine/FusedVerilogEval",subset:"machine",split:"test"}}]}},n={image:"volcengine/sandbox-fusion:server-20250609",cnImage:"vemlp-cn-beijing.cr.volces.com/preset-images/code-sandbox:server-20250609",host:"http://localhost:8080",datasets:a}}}]);